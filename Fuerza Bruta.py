from datetime import datetime
import itertools
from Tourist_selection import Tourist
import  numpy as np
#from Test_case import generar
#from Simulated_anneling import simulated_anneling


def subconjuntos_con_elemento(array):
    primer_elemento = array[0]
    otros_elementos = array[1:]
    subconjuntos = []
    
    # Generar todos los subconjuntos posibles de los otros elementos
    num_subconjuntos = 1 << len(otros_elementos)  # Esto es 2^len(otros_elementos)
    
    for i in range(num_subconjuntos):
        subconjunto = [primer_elemento]
        for j in range(len(otros_elementos)):
            if i & (1 << j):
                subconjunto.append(otros_elementos[j])
        subconjuntos.append(subconjunto)
    
    return subconjuntos

def generar_permutaciones(array):
    return list(itertools.permutations(array))

def calc(city_tour,d):
    distance = 0
    for k in range(0, len(city_tour)-1):
        m = k + 1
        #print(city_tour[0][k],city_tour[0][m])
        #print(d[city_tour[0][k], city_tour[0][m]])
        distance = distance + d[city_tour[k], city_tour[m]]            
    #print(distance)
    return distance

def fuerza_bruta(M,N,k,a,T,d,v:np.ndarray):
    ans=-1
    cans=[]
    cities=[i for i in range(0,M)]
    subconjuntos=subconjuntos_con_elemento(cities)
    #print(v)
    for subconjunto in subconjuntos:
        permutaciones=generar_permutaciones(subconjunto[1:])
        for per in permutaciones:
            #per=list(per)
            #print(per)
            if(len(per)>=1):
                time=d[0][per[0]]+d[per[-1]][0]
                time +=calc(list(per),d)
                for i in per:
      #              print(i)
       #             print(v)
                    time+=v[i]
                if(time > T):
                    continue
                aux=[]
                aux.append(0)
                aux.extend(per)
                vis=Tourist(N,k,a)
                temp=vis.selection(aux)[0]
                if(ans<temp):
                    ans=temp
                    cans=aux
    #print(cans)
    return ans

M=25
N=18
K=8
T=78
A=np.array([[15, 25, 25, 23, 5, 21, 2, 9, 16, 21, 20, 19, 10, 2, 24, 7, 21, 9, 7, 25, 6, 4, 0, 1, 7], [15, 19, 24, 2, 14, 13, 20, 18, 6, 22, 22, 12, 15, 12, 7, 4, 20, 22, 0, 24, 24, 3, 24, 13, 7], [5, 25, 22, 16, 14, 1, 17, 7, 3, 14, 4, 25, 14, 21, 16, 17, 19, 10, 24, 14, 19, 23, 16, 13, 17], [14, 5, 23, 15, 14, 8, 24, 7, 20, 8, 24, 24, 16, 15, 20, 7, 8, 14, 2, 22, 9, 7, 8, 10, 10], [17, 2, 4, 4, 7, 12, 22, 4, 22, 6, 2, 13, 13, 10, 17, 14, 13, 1, 6, 13, 12, 24, 18, 22, 0], [24, 18, 12, 15, 0, 11, 9, 24, 12, 13, 17, 23, 23, 17, 25, 19, 7, 15, 7, 8, 13, 15, 0, 12, 10], [21, 21, 25, 12, 23, 5, 14, 4, 19, 17, 0, 12, 18, 18, 21, 0, 2, 20, 13, 4, 14, 5, 1, 8, 12], [10, 6, 14, 10, 10, 24, 12, 8, 24, 13, 8, 2, 15, 0, 23, 17, 1, 11, 7, 20, 2, 24, 20, 1, 24], [0, 7, 6, 0, 19, 4, 7, 4, 15, 21, 3, 18, 6, 14, 22, 8, 24, 11, 5, 19, 19, 23, 22, 3, 24], [5, 9, 3, 18, 0, 9, 18, 21, 12, 12, 22, 6, 2, 18, 22, 20, 7, 3, 22, 24, 9, 21, 19, 25, 3], [25, 18, 25, 1, 11, 17, 13, 21, 11, 2, 16, 20, 10, 0, 13, 15, 3, 13, 11, 20, 14, 22, 4, 13, 5], [23, 16, 20, 8, 19, 25, 17, 24, 15, 14, 13, 23, 18, 8, 10, 7, 2, 8, 14, 7, 24, 14, 18, 19, 21], [12, 10, 0, 15, 10, 5, 15, 6, 11, 25, 8, 10, 8, 19, 22, 8, 17, 0, 16, 6, 2, 7, 23, 13, 15], [17, 24, 7, 22, 15, 20, 22, 15, 14, 25, 0, 2, 9, 7, 12, 22, 7, 9, 21, 18, 11, 15, 17, 16, 11], [13, 23, 17, 10, 11, 22, 14, 8, 9, 8, 7, 3, 23, 6, 10, 3, 23, 17, 24, 22, 5, 6, 6, 23, 15], [8, 23, 18, 24, 16, 19, 9, 3, 6, 9, 7, 11, 5, 9, 0, 22, 17, 4, 8, 1, 1, 17, 9, 22, 4], [20, 24, 15, 3, 0, 18, 9, 15, 15, 14, 10, 5, 1, 8, 15, 3, 2, 12, 15, 2, 18, 20, 21, 1, 4], [4, 25, 18, 9, 2, 7, 3, 17, 24, 13, 19, 19, 25, 19, 7, 24, 16, 12, 14, 14, 9, 18, 13, 9, 18]])
d=np.array([[0, 92, 84, 90, 70, 54, 29, 58, 76, 36, 1, 98, 21, 90, 55, 44, 36, 20, 28, 98, 44, 14, 12, 49, 13], [46, 0, 45, 78, 34, 6, 94, 59, 69, 16, 49, 11, 71, 38, 81, 80, 47, 74, 25, 91, 9, 6, 85, 30, 99], [38, 11, 0, 30, 13, 49, 36, 59, 82, 47, 21, 48, 46, 27, 86, 35, 90, 88, 83, 10, 78, 82, 22, 69, 94], [32, 21, 60, 0, 49, 35, 82, 89, 72, 29, 88, 42, 99, 100, 8, 30, 5, 41, 52, 35, 9, 28, 73, 92, 41], [28, 84, 64, 51, 0, 83, 59, 19, 34, 18, 32, 96, 72, 69, 34, 96, 75, 55, 75, 52, 47, 29, 18, 66, 64], [12, 97, 7, 15, 20, 0, 81, 21, 88, 55, 77, 9, 50, 49, 77, 60, 68, 33, 71, 2, 88, 93, 15, 88, 69], [97, 35, 99, 83, 44, 15, 0, 38, 56, 21, 59, 1, 93, 93, 34, 65, 98, 23, 65, 14, 81, 39, 82, 65, 78], [26, 20, 48, 98, 21, 70, 100, 0, 68, 1, 77, 42, 63, 3, 15, 47, 40, 31, 8, 31, 73, 11, 11, 94, 63], [9, 98, 69, 99, 17, 17, 85, 61, 0, 71, 22, 34, 68, 78, 55, 28, 70, 97, 94, 89, 26, 92, 40, 52, 86], [84, 48, 57, 67, 58, 16, 32, 29, 9, 0, 44, 3, 76, 71, 30, 76, 29, 1, 10, 91, 81, 8, 30, 9, 5], [43, 10, 66, 31, 36, 86, 63, 28, 70, 17, 0, 93, 74, 74, 61, 32, 61, 53, 25, 13, 13, 85, 56, 46, 55], [53, 60, 94, 7, 87, 84, 83, 13, 8, 52, 94, 0, 44, 14, 32, 25, 25, 69, 58, 18, 55, 24, 36, 60, 32], [10, 57, 71, 13, 7, 84, 70, 2, 12, 97, 31, 22, 0, 53, 63, 62, 28, 52, 8, 22, 49, 1, 50, 34, 59], [37, 55, 90, 94, 72, 85, 92, 63, 20, 25, 38, 28, 8, 0, 75, 95, 70, 8, 96, 41, 8, 7, 75, 62, 65], [68, 21, 8, 66, 11, 24, 9, 77, 9, 87, 31, 52, 16, 73, 0, 32, 75, 77, 6, 80, 11, 54, 85, 75, 73], [67, 41, 34, 27, 86, 92, 41, 31, 34, 51, 17, 86, 83, 39, 59, 0, 41, 97, 10, 2, 59, 80, 73, 13, 10], [69, 28, 65, 34, 17, 45, 9, 32, 48, 37, 21, 57, 70, 91, 39, 79, 0, 84, 68, 2, 86, 71, 39, 85, 14], [18, 34, 15, 14, 96, 71, 20, 35, 37, 78, 27, 92, 44, 27, 88, 82, 34, 0, 65, 63, 33, 7, 12, 82, 55], [36, 6, 1, 43, 99, 17, 82, 34, 21, 95, 57, 71, 91, 55, 72, 2, 15, 10, 0, 89, 20, 70, 5, 48, 75], [71, 19, 56, 17, 6, 40, 47, 6, 46, 27, 88, 32, 86, 14, 46, 100, 72, 53, 80, 0, 96, 20, 31, 21, 23], [53, 4, 23, 95, 43, 53, 86, 95, 32, 35, 21, 90, 14, 49, 5, 61, 29, 26, 59, 45, 0, 40, 30, 29, 4], [85, 25, 52, 43, 36, 9, 99, 36, 45, 83, 66, 52, 87, 69, 43, 4, 15, 34, 23, 75, 34, 0, 5, 14, 77], [56, 45, 94, 41, 56, 78, 66, 15, 50, 74, 25, 33, 6, 91, 56, 1, 67, 69, 88, 93, 95, 95, 0, 86, 26], [47, 56, 9, 86, 43, 80, 41, 85, 16, 93, 39, 65, 40, 86, 53, 42, 52, 90, 38, 71, 17, 25, 54, 0, 86], [49, 87, 96, 23, 79, 73, 39, 52, 71, 1, 39, 37, 27, 56, 75, 78, 84, 42, 60, 57, 57, 87, 28, 66, 0]])
v=([0, 2, 48, 18, 16, 15, 9, 48, 7, 44, 48, 35, 6, 38, 28, 3, 2, 6, 14, 15, 33, 39, 2, 36, 13])

start_time = datetime.now()

res=fuerza_bruta(M,N,K,A,T,d,v)
print(res)



end_time = datetime.now()
execution_time = end_time - start_time

print(f"El tiempo de ejecuciÃ³n es: {execution_time}")